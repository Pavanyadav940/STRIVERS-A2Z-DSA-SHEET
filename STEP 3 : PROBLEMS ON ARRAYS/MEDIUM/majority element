https://leetcode.com/problems/majority-element/description/
solution:
class Solution {
public:
APPRAOCH :1
    int majorityElement(vector<int>& nums) {
     int n = nums.size();
    int cnt = 0; // count
    int el; // Element

    //applying the algorithm:
    for (int i = 0; i < n; i++) {
        if (cnt == 0) {
             cnt = 1;
            el = nums[i];
        }
        else if (el == nums[i]) 
         cnt++;
        else cnt--;
    }
  //  return el;

    //checking if the stored element
    // is the majority element:
    //this step is done when it say that array might has not a majority element;
    //but in this question it syas:You may assume that the majority element always exists in the array.that's why don't write the this step:

  
    int cnt1 = 0;
    for (int i = 0; i < n; i++) {
        if (nums[i] == el) cnt1++;
    }

    if (cnt1 > (n / 2)) return el;
    return -1;

}
};

APPRAOCH :2

        // unordered_map<int,int>mpp;

        // for(int i=0;i<nums.size();i++){
        //     mpp[nums[i]]++;
        // }
        // for(auto it:mpp){
        //     if(it.second>nums.size()/2)
        //     {
        //         return it.first;
        //         }


        // }
        // return {};


        APPRAOCH :3
    //     int n=nums.size();
    //     for(int i=0;i<nums.size();i++){
    //         int cnt=0;
    //         for(int j=0;j<nums.size();j++){
    //             if(nums[i]==nums[j]){
    //                 cnt++;
    //             }
    //         }
    //             if(cnt>(n/2))
    //             return nums[i];
    //     }
    //     return {};
//     // }  
//     }
    
// };
