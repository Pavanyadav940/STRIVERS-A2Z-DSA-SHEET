
https://leetcode.com/problems/two-sum/description/
solution:
class Solution {
public:

  APPROACH 1:
    vector<int> twoSum(vector<int>& nums, int target) {
    int n=nums.size();
    unordered_map<int, int> mpp;
    for (int i = 0; i < n; i++) {
        int num = nums[i];
        int moreNeeded = target - num;
        if (mpp.find(moreNeeded)!=mpp.end()) {
            return {i,mpp[moreNeeded]};
        }
        mpp[num] = i;
    }
    return {};
    }
    };

  APPROACH 2:
    //    vector<pair<int,int>>v;
    //    for(int i=0;i<nums.size();i++){
    //        v.push_back({nums[i],i});
    //    }
       
    //     sort(v.begin(),v.end());
    //      int left=0;
    //     int right=nums.size() - 1;
    //     while(left<right){

    //       int sum=v[left].first+v[right].first;
    //       if(sum==target)
    //           return {v[left].second,v[right].second};
    //       else if(sum<target)
    //           left++;
    //       else
    //           right--;
    //      }
    //      return {};
    // }
