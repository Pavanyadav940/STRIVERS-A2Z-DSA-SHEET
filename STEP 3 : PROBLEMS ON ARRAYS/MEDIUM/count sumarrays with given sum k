https://leetcode.com/problems/subarray-sum-equals-k/description/
solution:
APPROACH 1:
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
    
        map<int,int> mp;
        mp[0]=1;
        int prefix_sum=0;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            prefix_sum+=nums[i];
             int diff=prefix_sum-k;
            if(mp.find(diff)!=mp.end()){
                ans+=mp[diff];
            }

            mp[prefix_sum]++;
        }
        return ans;
    }
};
APPROACH 2:
    // int len = 0;
    // for (int i = 0; i < n; i++) { // starting index
    //     int s = 0; // Sum variable
    //     for (int j = i; j < n; j++) { // ending index
    //         // add the current element to
    //         // the subarray a[i...j-1]:
    //         s += nums[j];

    //         if (s == k)
    //             len++ ;
    //     }
    // }
    // return len;
    // }
    
