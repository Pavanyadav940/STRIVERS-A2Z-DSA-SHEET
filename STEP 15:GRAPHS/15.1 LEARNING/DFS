learrn from this link:
https://takeuforward.org/data-structure/depth-first-search-dfs/

question:
https://www.codingninjas.com/studio/problems/dfs-traversal_630462?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf
solution:
#include<bits/stdc++.h>

// function to prepare the adjacency list
void dfs(int node,unordered_map<int,list<int>> &adj,unordered_map<int,bool> &visited,vector<int> &component){
    component.push_back(node);
    // visited one true
    visited[node]=1;
    for(auto i:adj[node]){
        if(!visited[i]){
            dfs(i,adj,visited,component);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{

    // Initially prepare the adjacent list of Graph
    unordered_map<int,list<int>> adj;
    for(int i=0;i<E;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // store result in ans
    vector<vector<int>> ans;
    // make visited nodes true
    unordered_map<int,bool> visited;
    for(int i=0;i<V;i++){
        if(!visited[i]){
            vector<int>component;
            dfs(i,adj,visited,component);
            ans.push_back(component);
        }
    }
    return ans;
}
