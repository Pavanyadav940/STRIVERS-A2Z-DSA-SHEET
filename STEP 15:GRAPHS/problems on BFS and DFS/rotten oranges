question link:
https://leetcode.com/problems/rotting-oranges/description/
solution:
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
         int n=grid.size();
          int m =grid[0].size();
          int timetaken=0;
               queue<pair<pair<int,int>,int>>q;
         vector<vector<int>>vis(n,vector<int> (m,0));
        //  vector<vector<int>>ans(n,vector<int> (m,0));
          for(int i=0;i<n;i++){
              for(int j=0;j<m;j++){
                  if(grid[i][j]==2){
                      q.push({{i,j},0});
                      vis[i][j]=1;

                  } 
              }
          }
        while(!q.empty()){
                 int first=q.front().first.first;
                  int second=q.front().first.second;
                  int third=q.front().second;
                  q.pop();
                int nrow[]={-1,0,1,0};
                int ncol[]={0,1,0,-1};
timetaken=max(timetaken,third );
                for(int i=0;i<4;i++){
        
                      int row=first+nrow[i];
                      int col=second+ncol[i];  

                      if(row>=0 && row<n && col>=0&& col<m &&
                         grid[row][col]==1&&vis[row][col]!=1){
                             q.push({{row,col},third+1});
                             vis[row][col]=1;
                             grid[row][col]=2;
                            //  ans[row][col]=2;
                         }
                    
                }
        }
         for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    // if not visited and fresh oranges left so not possible to rotten all oranges of that matrix return -1;
                    if (vis[i][j]!=2 && grid[i][j] == 1){
                        return -1;
                    }
                }
            }
        return timetaken;
    }
    
};
